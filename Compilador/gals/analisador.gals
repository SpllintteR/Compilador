#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = LL
#RegularDefinitions
letra: [a-zA-Z]
digito: [0-9]
digito2: [1-9]
aspas: \" 
barra: "/"
chaveAbre: "{"
chaveFecha: "}"
comentarioLinha: {barra}{barra}([^\n])*
comentarioBloco: {chaveAbre}[^}]*{chaveFecha}
#Tokens
  // a) identificador
  identificador : ({letra} | (_{letra})) ({letra} | {digito} | (_{letra}))*

  //b) constante integer
  constanteInteger: 0 | ({digito2} {digito}? {digito}? {digito}? {digito}?)
  
  //c) constante float
  constanteFloat: (0 | ({digito2} {digito}? {digito}? {digito}? {digito}?)) , (0 | ({digito}? {digito}? {digito}? {digito}?) {digito2})
  
  // d) constante string
  constanteString: {aspas} ([^\"\\\n] | \\ (\\ | \"))* {aspas}

  // comentarios: de linha e de bloco - ignorados
  // e) comentário de linha
  :!{comentarioLinha}
  // f) comentário de bloco
  :!{comentarioBloco}

  //caracteres de formatacao - ignorados
  :[\t\s\n]  
  
  // simbolos especiais
  "+"
  "-"
  "*"
  "/"
  "=" 
  "&&"
  "||"
  "!"
  "=="
  "!="
  "<"
  "<="
  ">"
  ">="
  ","
  ";"
  "("
  ")"

  //palavras reservadas
  pr_boolean = identificador : "boolean"
  pr_do = identificador : "do"
  pr_else = identificador : "else"
  pr_end = identificador : "end"
  pr_false = identificador : "false"
  pr_float = identificador : "float"
  pr_if = identificador : "if"
  pr_integer = identificador : "integer"
  pr_main = identificador : "main"
  pr_print = identificador : "print"
  pr_println = identificador : "println"
  pr_scan = identificador : "scan"
  pr_string = identificador : "string"
  pr_true = identificador : "true"
  pr_void = identificador : "void"
  pr_while = identificador : "while"
  pr_global = identificador : "global"
  pr_local = identificador : "local"
  pr_return = identificador : "return"
#NonTerminals
<programa>

<variaveis_globais>
<lista_modulos>
<lista_comandos>
<comandos>
<modulo>
<tipo_modulo>
<tipo>
<lista_parametros>
<parametros>
<parametros1>
<parametro>
<variaveis_locais>
<retorno>
<variaveis>
<lista_identificadores>
<lista_identificadores1>
<valor>
<constante>
<atriModulo>
<atriModulo1>
<parametros_reais>
<entrada>
<saida>
<print>
<lista_expressao>
<lista_expressao1>
<relecao>
<relecao1>
<relecao2>
<relecao3>
<else>
<repeticao>
<expressao>
<expressao1>
<elemento>
<relacional>
<relacional1>
<operador_relacional>
<aritmetica>
<aritmetica1>
<termo>
<termo1>
<fator>
<fator1>
<simbolo>
<simbolo1>
<simbolo2>
#Grammar
// Programa geral
<programa>::= pr_main <variaveis_globais>  <lista_modulos> <lista_comandos> pr_end;
<variaveis_globais>::= î | pr_global <variaveis> <variaveis_globais>;
<lista_modulos>::= î | <modulo> <lista_modulos>;
<lista_comandos>::= î | <comandos> <lista_comandos>;
<comandos>::= <atriModulo> | <entrada> | <saida> | <relecao>;

// forma do modulo
<modulo>::= <tipo_modulo> identificador "(" <lista_parametros> ")" <variaveis_locais> <lista_comandos> <retorno> pr_end;
<tipo_modulo>::= <tipo> | pr_void;
<tipo>::= pr_boolean | pr_float | pr_integer | pr_string;
<lista_parametros>::= î | <parametros>;
<parametros>::= <parametro> <parametros1>;
<parametros1>::= î | "," <parametros>;
<parametro>::= <tipo> identificador;
<variaveis_locais>::= î | pr_local <variaveis> <variaveis_locais>;
<retorno>::= î | pr_return <expressao>;

// forma da variavel
<variaveis>::= <tipo> <lista_identificadores> <valor>";" ; 
<lista_identificadores>::= identificador <lista_identificadores1>; 
<lista_identificadores1>::= î | "," <lista_identificadores>;
<valor>::= î | "=" <constante>;
<constante>::= constanteInteger | constanteFloat | constanteString | pr_true | pr_false;

//forma da atribuicao e Chamada de Modulo
<atriModulo>::= identificador <atriModulo1>;
<atriModulo1>::=  "=" <expressao> | "(" <parametros_reais> ")" ";";

<parametros_reais>::= î | <lista_expressao>;

// forma de entrada
<entrada>::= pr_scan "(" <lista_identificadores> ")" ";" ;

// forma de saida
<saida>::= <print> "(" <lista_expressao> ")" ";" ;
<print>::=  pr_print | pr_println;
<lista_expressao>::= <expressao> <lista_expressao1>
<lista_expressao1>î | "," <lista_expressao>;

// forma selecao e repetição
<relecao>::= <relecao> "(" <expressao> ")" <relecao2> <lista_comandos> <relecao3>";";
<relecao1>::= pr_if | pr_while;
<relecao2>::= î | pr_do;
<relecao3>::= î |  <else> pr_end;
<else>::= î | pr_else <lista_comandos>;

//forma da expressao
<expressao>::= <expressao1> <elemento>;
<expressao1>::= î | <expressao> <simbolo>;
<simbolo>::= "||" | "&&";
<elemento>::= <relacional> | pr_true | pr_false | "!" <expressao>;
<relacional>::= <aritmetica1> <aritmetica>;
<relacional1>::= î | <aritmetica> <operador_relacional>; 
<operador_relacional>::= "==" | "!=" | "<" | "<=" | ">" | ">=";
<aritmetica>::= <aritmetica1> <termo>;
<aritmetica1>::= i | <aritmetica> <simbolo1>;
<simbolo1>::= "+" | "-";
<termo>::= <termo1> <fator>;
<termo1>::= î | <termo><simbolo2>;
<simbolo2>::= "*" | "/";
<fator>::= identificador <fator1> | constanteInteger | constanteFloat | constanteString | "(" <expressao> ")" | <simbolo1> <fator>;
<fator1>::= î | "(" <lista_expressao> ")" ;
